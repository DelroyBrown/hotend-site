# Generated by Django 3.1.1 on 2020-09-22 08:55

import base_models.generate_serializer_mixin
import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnyItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_base_models.anyitem_set+', to='contenttypes.contenttype')),
                ('sku', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.sku')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=(base_models.generate_serializer_mixin.GenerateSerializerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('failed', models.BooleanField(default=False)),
                ('completed', models.BooleanField(default=False)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base_models.anyitem')),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.machine')),
                ('operator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.operator')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_base_models.event_set+', to='contenttypes.contenttype')),
                ('work_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.workorder')),
            ],
            options={
                'ordering': ['-date_created'],
            },
            bases=(base_models.generate_serializer_mixin.GenerateSerializerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BulkItem',
            fields=[
                ('anyitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base_models.anyitem')),
                ('work_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bulk_items', to='core.workorder')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('base_models.anyitem',),
        ),
        migrations.CreateModel(
            name='LogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_reported', models.DateTimeField(default=datetime.datetime.now)),
                ('failed', models.BooleanField(default=False)),
                ('message', models.TextField(blank=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='base_models.event')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_base_models.logentry_set+', to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['date_reported'],
            },
            bases=(base_models.generate_serializer_mixin.GenerateSerializerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('production_step_field', models.CharField(choices=[('Mid-assembly QC', 'Assembly Qc'), ('Curing', 'Curing'), ('Cutting', 'Cutting'), ('Deathrig testing', 'Deathrig'), ('Dry assembly', 'Dry Assembly'), ('End-of-line QC', 'Eol Qc'), ('Goods-In QC', 'Goods In Qc'), ('Heater assembly', 'Heater Assembly'), ('Hot tightening', 'Hot Tightening'), ('Inspection', 'Inspection'), ('Packing', 'Packing'), ('Potting', 'Potting'), ('Pressing', 'Pressing'), ('Unique ID setting', 'Uid Setting')], editable=False, max_length=255)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_base_models.configuration_set+', to='contenttypes.contenttype')),
                ('sku', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='configurations', to='core.sku')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=(base_models.generate_serializer_mixin.GenerateSerializerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SingleItem',
            fields=[
                ('anyitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base_models.anyitem')),
                ('contains', models.ManyToManyField(blank=True, related_name='part_of', to='base_models.AnyItem')),
                ('from_bulk', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='singles_produced', to='base_models.bulkitem')),
                ('uid', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='item', to='core.uniqueid')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('base_models.anyitem',),
        ),
    ]
