from django.urls import include, path

# --DELETE

class Project:
    def __init__(
            self, *,
            name,
            verbose_name=None,
            item_class=None,
            configuration_class=None,
            event_class=None,
            additional_api_urls=None,
    ):
        """
        Generates an API and web interface pages for a given "project" - usually a single type of rig.

        To create and use a project, instantiate this class with the desired arguments (see below) and add it to the
        PROJECTS list in `projects/all_projects.py`.

        Accepts the following keyword-only arguments. Pass in the Django models that make up the data underlying
        this rig and its API. The sets of URLs and pages returned will depend on which classes are supplied here.
          * name (required) - A unique label for this API. This is used to construct and name the URLs.
          * verbose_name (optional) - A more human-readable name, which can be displayed on the frontend.
          * item_class (optional) - An item class (SingleItem, BulkItem, or a subclass of either).
          * configuration_class (optional) - Configuration or a subclass.
          * event_class (optional) - Event or a subclass.
          * additional_api_urls (optional) - Any other non-standard URLs that should be attached to this
            project's API. These should be specified relative to the project itself - i.e. if an additional URL
            of `endpoint/` is given, the generator function will create `{name}/endpoint/`.
        """
        # Basic validation.
        if event_class is not None and item_class is None:
            raise ValueError("event_class requires an item_class")

        self._name = name
        self._verbose_name = verbose_name or name
        self._item_class = item_class
        self._configuration_class = configuration_class
        self._event_class = event_class

        self._additional_api_urls = additional_api_urls or []


    def generate_basic_api(self):
        """
        Produce API views and URLs that support data lookup and logging for the rig.
        Returns an entry for a Django URLconf that wraps the group of URLs produced.

        urls = [
            this_project.generate_basic_api()
        ]

        Creates the following endpoints, depending on which classes were supplied to the Project constructor:
          * POST item/ - Item get-or-create endpoint (requires item_class)
          * PUT item/<int:pk>/ - Item update endpoint (requires item_class)
          * GET config/<str:sku>/ - Configuration lookup (requires configuration_class)
          * GET config_search/<str:search_terms>/ - Configuration search (requires configuration_class). Intended
            for use only by the frontend.
          * GET event/<int:pk> - Retrieve an event instance
          * POST start/ - Start the process and create an event instance (requires item_class, event_class)
          * PUT finish/<int:pk>/ - End the process and store the final report (requires item_class, event_class)
          * GET logs/<int:pk>/ - Retrieve all log entries for this event (always included). Inteded for use only
            by the frontend.

        Also includes in the list any URLs specified under self._additional_api_urls. These will take precedence
        over the autogenerated ones.
        """
        urls = self._additional_api_urls

        if self._configuration_class is not None:
            # GET config/<str:sku>/ - Retrieve the configuration settings for a particular variant.
            urls.append(path(
                "config/<str:sku>/",
                self._configuration_class.generate_lookup_view().as_view(),
                name=F"{self._name}_config"
            ))

            # GET config_search/<str:search_terms>/ - Look for SKUs and whether they have valid configurations.
            urls.append(path(
                "config_search/<str:search_terms>/",
                self._configuration_class.generate_sku_search_view().as_view(),
                name=F"{self._name}_config_search"
            ))

        if self._item_class is not None:
            # POST item/ - A get-or-create endpoint for Items.
            # See base_models.base_views.GetOrCreateView for implementation details.
            urls.append(path(
                "item/",
                self._item_class.generate_lookup_view().as_view(),
                name=F"{self._name}_item"
            ))

            # PUT item/<int:pk>/ - Update an item.
            urls.append(path(
                "item/<int:pk>/",
                self._item_class.generate_update_view().as_view(),
                name=F"{self._name}_item_update"
            ))

            if self._event_class is not None:
                # GET event/pk/ - A RetrieveView for an event.
                # Accepts an event pk and returns all fields.
                urls.append(path(
                    "event/<int:pk>/",
                    self._event_class.generate_retrieve_view().as_view(),
                    name=F"{self._name}_event"
                ))

                # POST start/ - Essentially a CreateView for an event, with a limited set of fields.
                # Only accepts data that identifies the event (SKU, work order, etc) and sets all other fields
                # to their default/empty values.
                urls.append(path(
                    "start/",
                    self._event_class.generate_start_view().as_view(),
                    name=F"{self._name}_start"
                ))

                # PUT finish/pk/ - A corresponding UpdateView that allows the event's results to be filled in,
                # but won't allow editing of its identity fields (SKU, work order, etc).
                urls.append(path(
                    "finish/<int:pk>/",
                    self._event_class.generate_finish_view().as_view(),
                    name=F"{self._name}_finish"
                ))

        # GET logs/pk/ - An internal endpoint that returns all the log entries for a given Event.
        urls.append(path(
            "logs/<int:pk>/",
            self._event_class.generate_log_lookup_view().as_view(),
            name=F"{self._name}_logs"
        ))

        return path(self._name + "/", include(urls))


    def generate_page_config(self):
        """
        Return a dictionary defining this project's configuration UI.

        Determines which pages are available, and provides metadata like names and labels.
        """
        return {
            "name": self._name,
            "verbose_name": self._verbose_name,
            "pages": {
                "configuration": {
                    "enabled": (self._configuration_class is not None),
                },
                "events": {
                    "enabled": (self._event_class is not None),
                    "has_logs": (len(self._event_class._log_fields) > 0),
                },
            }
        }


    def generate_ajax_views(self):
        """
        Produce views and URLs - both Django pages and API endpoints - that support the configuration UI.
        Generated Django "pages" are intended to be retrieved using Ajax and embedded into an otherwise
        React-based page.
        """
        urls = []

        if self._configuration_class is not None:
            urls.append(path(
                "config/create/<str:sku>/",
                self._configuration_class.generate_create_form_view(self._name).as_view(),
                name=F"{self._name}_config_create"
            ))

            urls.append(path(
                "config/update/<str:sku>/",
                self._configuration_class.generate_update_form_view(self._name).as_view(),
                name=F"{self._name}_config_update"
            ))

        if self._event_class is not None:
            urls.append(path(
                "event/log_csv/<int:pk>/",
                self._event_class.generate_single_event_log_csv_view().as_view(),
                name=f"{self._name}_event_log_csv"
            ))

            urls.append(path(
                "event/search/log_csv/",
                self._event_class.generate_multi_event_log_csv_view(self._name).as_view(),
                name=f"{self._name}_multi_event_log_csv"
            ))

            urls.append(path(
                "event/search/details_csv/",
                self._event_class.generate_multi_event_details_csv_view(self._name).as_view(),
                name=f"{self._name}_multi_event_details_csv"
            ))

            urls.append(path(
                "event/search/<int:page>/",
                self._event_class.generate_search_view(self._name).as_view(),
                name=F"{self._name}_event_search"
            ))

        return path(self._name + "/", include(urls))
