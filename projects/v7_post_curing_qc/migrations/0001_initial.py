# Generated by Django 3.1.1 on 2021-03-19 07:20

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base_models', '0004_related_name_on_event_fks'),
    ]

    operations = [
        migrations.CreateModel(
            name='V7CuringQCConfig',
            fields=[
                ('configuration_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base_models.configuration')),
                ('voltage', models.SmallIntegerField(choices=[(12, '12V'), (24, '24V')])),
                ('temperature_open_circuit_threshold', models.FloatField(default=10.0)),
                ('temperature_short_circuit_threshold', models.FloatField(default=350.0)),
                ('current_test_pwm', models.FloatField(default=0.1)),
                ('current_open_circuit_threshold', models.FloatField(default=0.001)),
                ('current_short_circuit_threshold', models.FloatField(default=4.7)),
                ('thermal_target_temp', models.FloatField(default=250.0)),
                ('thermal_min_hot_temp', models.FloatField(default=220.0)),
                ('thermal_max_hot_temp', models.FloatField(default=270.0)),
                ('current_min', models.FloatField(default=0.001)),
                ('current_max', models.FloatField(default=4.7)),
                ('heat_rate_min_offset', models.FloatField(default=0.0)),
                ('heat_rate_min_gradient', models.FloatField(default=0.0)),
                ('heat_rate_max_offset', models.FloatField(default=1000.0)),
                ('heat_rate_max_gradient', models.FloatField(default=0.0)),
                ('overheat_temp', models.FloatField(default=300.0)),
                ('heatup_timeout', models.FloatField(default=180.0)),
                ('cooling_timeout', models.FloatField(default=180.0)),
                ('mosfet_max_current_after_disable', models.FloatField(default=0.0)),
                ('mosfet_check_time', models.FloatField(default=15.0)),
                ('mosfet_check_min_temp_drop', models.FloatField(default=15.0)),
                ('disconnect_tolerance', models.FloatField(default=0.0)),
                ('safe_handling_temperature', models.FloatField(default=50.0)),
                ('pid_kp', models.FloatField(default=0.01)),
                ('pid_ki', models.FloatField(default=0.01)),
                ('pid_kd', models.FloatField(default=0.0)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('base_models.configuration',),
        ),
        migrations.CreateModel(
            name='V7CuringQCEvent',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base_models.event')),
                ('result', models.CharField(choices=[('Passed', 'Passed'), ('Cancelled', 'Cancelled'), ('Disconnected', 'Disconnected'), ('Temperature sensor open circuit', 'Temp Sensor Open Circuit'), ('Temperature sensor short circuit', 'Temp Sensor Short Circuit'), ('Current sensor open circuit', 'Current Sensor Open Circuit'), ('Current sensor short circuit', 'Current Sensor Short Circuit'), ('Current too low', 'Current Too Low'), ('Current too high', 'Current Too High'), ('Heating rate too slow', 'Heating Too Slow'), ('Heating rate too fast', 'Heating Too Fast'), ('Heating timeout', 'Heating Timeout'), ('Cooling timeout', 'Cooling Timeout'), ('Overheat', 'Overheat'), ('Thermal runaway', 'Thermal Runaway')], default='Passed', max_length=255)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('base_models.event',),
        ),
        migrations.CreateModel(
            name='V7CuringQCLogEntry',
            fields=[
                ('logentry_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base_models.logentry')),
                ('temperature', models.FloatField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('base_models.logentry',),
        ),
    ]
